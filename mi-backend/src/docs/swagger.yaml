openapi: 3.0.0
info:
  title: API de Usuarios con Autenticación y Gestión de Sesiones
  version: 1.0.0
  description: >
    API para gestión de usuarios con login, 2FA, recuperación de credenciales,
    gestión de sesiones y administración de roles.
servers:
  - url: http://localhost:3000/api

paths:
  /auth/login:
    post:
      summary: Iniciar sesión de usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: 
                  type: string
                  format: email
                  example: "usuario@ejemplo.com"
                password: 
                  type: string
                  example: "Password123!"
      responses:
        '200':
          description: Login exitoso o requiere 2FA
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message: 
                        type: string
                        example: "Login exitoso"
                      token: 
                        type: string
                      user:
                        type: object
                        properties:
                          id: { type: integer }
                          email: { type: string }
                          role: { type: string }
                      session:
                        type: object
                        properties:
                          id: { type: integer }
                          created_at: { type: string }
                          expires_at: { type: string }
                  - type: object
                    properties:
                      message: 
                        type: string
                        example: "2FA requerido"
                      requires2fa: 
                        type: boolean
                        example: true
                      tempToken: 
                        type: string
                      offlinePin: 
                        type: string
                        example: "829705"
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Credenciales inválidas" }

  /auth/2fa/verify:
    post:
      summary: Verificar código 2FA
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tempToken, otp]
              properties:
                tempToken: 
                  type: string
                  description: "Token temporal recibido en el login"
                otp: 
                  type: string
                  example: "123456"
                  description: "Código OTP de 6 dígitos"
      responses:
        '200':
          description: 2FA verificado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "2FA verificado" }
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                      role: { type: string }
                  session:
                    type: object
                    properties:
                      id: { type: integer }
                      created_at: { type: string }
                      expires_at: { type: string }
        '400':
          description: Token o código 2FA inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Token o código 2FA inválido o expirado" }

  /auth/verify-offline:
    post:
      summary: Verificar PIN offline para login sin internet
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, offlinePin]
              properties:
                email:
                  type: string
                  format: email
                  example: "usuario@ejemplo.com"
                offlinePin:
                  type: string
                  example: "829705"
                  description: "PIN offline de 6 dígitos"
      responses:
        '200':
          description: Login offline exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Login offline exitoso" }
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                      role: { type: string }
                  session:
                    type: object
                    properties:
                      id: { type: integer }
                      created_at: { type: string }
                      expires_at: { type: string }
                      session_type: { type: string, example: "offline" }
        '400':
          description: PIN inválido o expirado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "PIN offline inválido o expirado" }

  /auth/logout:
    post:
      summary: Cerrar sesión actual
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Sesión cerrada exitosamente" }

  /auth/refresh-token:
    post:
      summary: Renovar token de acceso
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Token renovado" }
                  token: { type: string }
                  expires_at: { type: string }

  /auth/sessions:
    get:
      summary: Obtener sesiones activas del usuario
      tags: [Sessions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de sesiones activas
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        device_info: { type: string }
                        ip_address: { type: string }
                        created_at: { type: string }
                        last_activity: { type: string }
                        expires_at: { type: string }
                        location:
                          type: object
                          properties:
                            lat: { type: number }
                            lng: { type: number }
                  total: { type: integer }

  /auth/sessions/logout-others:
    post:
      summary: Cerrar todas las sesiones excepto la actual
      tags: [Sessions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Otras sesiones cerradas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Otras sesiones cerradas exitosamente" }

  /auth/sessions/{sessionId}:
    delete:
      summary: Cerrar una sesión específica
      tags: [Sessions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Sesión cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Sesión cerrada exitosamente" }
        '404':
          description: Sesión no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Sesión no encontrada" }

  /auth/password-reset/request:
    post:
      summary: Solicitar restablecimiento de contraseña
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: 
                  type: string
                  format: email
                  example: "usuario@ejemplo.com"
                via: 
                  type: string
                  enum: [email, sms]
                  default: email
      responses:
        '200':
          description: Instrucciones enviadas si la cuenta existe
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Recibirás instrucciones para restablecer la contraseña" }

  /auth/password-reset/confirm:
    post:
      summary: Confirmar restablecimiento de contraseña
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token: 
                  type: string
                  description: "Token de restablecimiento"
                newPassword: 
                  type: string
                  example: "NuevaPassword123!"
      responses:
        '200':
          description: Contraseña restablecida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Contraseña restablecida correctamente" }
        '400':
          description: Token inválido o contraseña no cumple requisitos
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /auth/recover-username:
    post:
      summary: Recuperar nombre de usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [emailOrPhone]
              properties:
                emailOrPhone: 
                  type: string
                  description: "Email o número de teléfono"
                  example: "usuario@ejemplo.com o 1234567890"
      responses:
        '200':
          description: Si existe, se envía username por email o SMS
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Si existe, recibirás la información" }

  /users:
    get:
      summary: Listar todos los usuarios
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    email: { type: string }
                    created_at: { type: string }

    post:
      summary: Crear un nuevo usuario
      tags: [Users]
      description: >
        Crea un nuevo usuario y genera un PIN offline con código QR para autenticación sin conexión.
        El PIN y QR se envían por email y también se devuelven en la respuesta (solo para desarrollo).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, role, phone]
              properties:
                email: 
                  type: string
                  format: email
                  example: "usuario@ejemplo.com"
                password: 
                  type: string
                  example: "Password123!"
                role: 
                  type: string
                  enum: [admin, user]
                  example: user
                phone: 
                  type: string
                  example: "1234567890"
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Usuario registrado exitosamente" }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                      role: { type: string }
                      phone: { type: string }
                  offlinePin: { type: string }
                  qrCodeUrl: { type: string }

  /users/{email}:
    put:
      summary: Actualizar usuario por email
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema: 
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail: 
                  type: string
                  format: email
                password: 
                  type: string
                role: 
                  type: string
                  enum: [admin, user]
                phone: 
                  type: string
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
                  user: 
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                      role: { type: string }
                      phone: { type: string }
        '404':
          description: Ingresa correctamente el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 1 }
                  message: { type: string }

    delete:
      summary: Eliminar usuario por email
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema: 
            type: string
            format: email
      responses:
        '200':
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
        '404':
          description: Ingresa correctamente el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 1 }
                  message: { type: string }

  /users/generate-offline-pin:
    post:
      summary: Generar PIN offline para usuario existente
      tags: [Users]
      security:
        - bearerAuth: []
      description: Genera un nuevo PIN offline con QR code para un usuario ya registrado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: 
                  type: string
                  format: email
                  example: "usuario_existente@ejemplo.com"
      responses:
        '200':
          description: PIN offline generado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                      role: { type: string }
                  offlinePin: { type: string }
                  qrCodeUrl: { type: string }
                  expiresAt: { type: string }
        '404':
          description: Usuario no encontrado
        '400':
          description: El usuario ya tiene un PIN activo

  /users/{email}/active-pins:
    get:
      summary: Obtener PINs offline activos de un usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema: 
            type: string
            format: email
      responses:
        '200':
          description: Lista de PINs activos
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }
                  activePins:
                    type: array
                    items:
                      type: object
                      properties:
                        offline_pin: { type: string }
                        created_at: { type: string }
                        expires_at: { type: string }
                  totalActive: { type: integer }

  /users/revoke-offline-pin:
    post:
      summary: Revocar (invalidar) un PIN offline
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, pin]
              properties:
                email: 
                  type: string
                  format: email
                pin: 
                  type: string
                  example: "829705"
      responses:
        '200':
          description: PIN revocado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
                  revokedPin: { type: string }
        '404':
          description: PIN no encontrado o ya revocado

  /clientes:
    get:
      summary: Obtener todos los clientes
      tags: [Clientes]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de clientes obtenida exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cliente'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo cliente
      tags: [Clientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id_user, nombre]
              properties:
                id_user:
                  type: integer
                  example: 1
                nombre:
                  type: string
                  example: "Juan Pérez"
                telefono:
                  type: string
                  example: "1234567890"
                contacto:
                  type: string
                  example: "María García"
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cliente'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
        summary: Actualizar un cliente
        tags: [Clientes]
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - nombre
                properties:
                  nombre:
                    type: string
                    example: "Juan Pérez"
                  telefono:
                    type: string
                    example: "+0987654321"
                  contacto:
                    type: string
                    example: "Ana Martínez"
        responses:
          '200':
            description: Cliente actualizado exitosamente
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/ApiResponse'
                    - type: object
                      properties:
                        data:
                          $ref: '#/components/schemas/Cliente'
          '404':
            description: Cliente no encontrado
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '500':
            description: Error del servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Eliminar un cliente
      tags: [Clientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Juan Pérez"
      responses:
        '200':
          description: Cliente eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clientes/user:
    post:
      summary: Obtener clientes por usuario
      tags: [Clientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Clientes obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cliente'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clientes/buscar:
    post:
      summary: Obtener un cliente por nombre
      tags: [Clientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Juan Pérez"
      responses:
        '200':
          description: Cliente obtenido exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cliente'
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /proveedores:
    get:
      summary: Obtener todos los proveedores
      tags: [Proveedores]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Proveedores obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proveedor'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo proveedor
      tags: [Proveedores]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Proveedor XYZ"
                telefono:
                  type: string
                  example: "1234567890"
                contacto:
                  type: string
                  example: "Carlos López"
      responses:
        '201':
          description: Proveedor creado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Proveedor'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Actualizar un proveedor
      tags: [Proveedores]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Proveedor XYZ"
                telefono:
                  type: string
                  example: "+0987654321"
                contacto:
                  type: string
                  example: "Laura García"
      responses:
        '200':
          description: Proveedor actualizado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Proveedor'
        '404':
          description: Proveedor no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Eliminar un proveedor
      tags: [Proveedores]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Proveedor XYZ"
      responses:
        '200':
          description: Proveedor eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
        '404':
          description: Proveedor no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /proveedores/buscar:
    post:
      summary: Obtener un proveedor por nombre
      tags: [Proveedores]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Proveedor XYZ"
      responses:
        '200':
          description: Proveedor obtenido exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Proveedor'
        '404':
          description: Proveedor no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /productos:
    get:
      summary: Obtener todos los productos
      tags: [Productos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de productos obtenida exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Producto'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo producto
      tags: [Productos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [codigo, nombre, unidad]
              properties:
                codigo:
                  type: string
                  example: "PROD-001"
                nombre:
                  type: string
                  example: "Laptop Dell XPS"
                descripcion:
                  type: string
                  example: "Laptop de 15 pulgadas, 16GB RAM"
                categoria:
                  type: string
                  example: "Electrónicos"
                unidad:
                  type: string
                  example: "pza"
                stock_minimo:
                  type: integer
                  example: 5
                stock_actual:
                  type: integer
                  example: 50
                id_proveedor:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Producto'
        '400':
          description: Datos de entrada inválidos o código duplicado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Actualizar un producto
      tags: [Productos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Laptop Dell XPS"
                codigo:
                  type: string
                  example: "PROD-001-UPD"
                descripcion:
                  type: string
                  example: "Laptop de 15 pulgadas, 32GB RAM"
                categoria:
                  type: string
                  example: "Electrónicos"
                unidad:
                  type: string
                  example: "pza"
                stock_minimo:
                  type: integer
                  example: 10
                stock_actual:
                  type: integer
                  example: 25
                id_proveedor:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Producto'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Eliminar un producto
      tags: [Productos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Laptop Dell XPS"
      responses:
        '200':
          description: Producto eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  message: { type: string }
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /productos/buscar:
    post:
      summary: Obtener un producto por nombre
      tags: [Productos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
              properties:
                nombre:
                  type: string
                  example: "Laptop Dell XPS"
      responses:
        '200':
          description: Producto obtenido exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Producto'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /productos/inventory/low-stock:
    get:
      summary: Obtener productos con stock bajo
      tags: [Productos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Productos con stock bajo obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Producto'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movimientos:
    get:
      summary: Obtener todos los movimientos
      tags: [Movimientos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de movimientos obtenida exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movimiento'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo movimiento
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tipo, id_producto, cantidad, responsable]
              properties:
                tipo:
                  type: string
                  enum: [Entrada, Salida]
                  example: "Entrada"
                id_producto:
                  type: integer
                  example: 1
                cantidad:
                  type: integer
                  minimum: 1
                  example: 10
                referencia:
                  type: string
                  example: "Orden de compra #123"
                responsable:
                  type: integer
                  example: 1
                id_cliente:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Movimiento creado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Movimiento'
        '400':
          description: Datos de entrada inválidos o stock insuficiente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movimientos/buscar:
    post:
      summary: Obtener un movimiento por ID
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Movimiento obtenido exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Movimiento'
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movimientos/producto:
    post:
      summary: Obtener movimientos por producto
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombreProducto
              properties:
                nombreProducto:
                  type: string
                  example: "Laptop Dell XPS"
      responses:
        '200':
          description: Movimientos del producto obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movimiento'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /movimientos/report/date-range:
    post:
      summary: Obtener movimientos por rango de fecha
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fechaInicio
                - fechaFin
              properties:
                fechaInicio:
                  type: string
                  format: date
                  example: "2024-01-01"
                fechaFin:
                  type: string
                  format: date
                  example: "2024-12-31"
      responses:
        '200':
          description: Movimientos por rango de fecha obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movimiento'
        '400':
          description: Parámetros de fecha inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /bitacora:
    get:
      summary: Obtener toda la bitácora
      tags: [Bitácora]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bitácora obtenida exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Bitacora'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo registro en bitácora
      tags: [Bitácora]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id_movimiento, id_proveedor, cantidad, id_producto]
              properties:
                id_movimiento:
                  type: integer
                  example: 1
                id_proveedor:
                  type: integer
                  example: 1
                cantidad:
                  type: integer
                  example: 50
                id_producto:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Registro de bitácora creado exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Bitacora'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bitacora/movimiento:
    post:
      summary: Obtener registros de bitácora por movimiento
      tags: [Bitácora]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movimientoId
              properties:
                movimientoId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Registros de bitácora por movimiento obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Bitacora'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /bitacora/proveedor:
    post:
      summary: Obtener registros de bitácora por proveedor
      tags: [Bitácora]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - proveedorId
              properties:
                proveedorId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Registros de bitácora por proveedor obtenidos exitosamente
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Bitacora'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          example: 0
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 1
        message:
          type: string

    Cliente:
      type: object
      required:
        - id_user
        - nombre
      properties:
        id_cliente:
          type: integer
          readOnly: true
        id_user:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Juan Pérez"
        telefono:
          type: string
          example: "1234567890"
        contacto:
          type: string
          example: "María García"

    Proveedor:
      type: object
      required:
        - nombre
      properties:
        id_proveedor:
          type: integer
          readOnly: true
        nombre:
          type: string
          example: "Proveedor ABC"
        telefono:
          type: string
          example: "1234567890"
        contacto:
          type: string
          example: "Carlos López"

    Producto:
      type: object
      required:
        - codigo
        - nombre
        - unidad
      properties:
        id_producto:
          type: integer
          readOnly: true
        codigo:
          type: string
          example: "PROD-001"
        nombre:
          type: string
          example: "Laptop Dell XPS"
        descripcion:
          type: string
          example: "Laptop de 15 pulgadas, 16GB RAM"
        categoria:
          type: string
          example: "Electrónicos"
        unidad:
          type: string
          example: "pza"
        stock_minimo:
          type: integer
          example: 5
        stock_actual:
          type: integer
          example: 50
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        id_proveedor:
          type: integer
          example: 1

    Movimiento:
      type: object
      required:
        - tipo
        - id_producto
        - cantidad
        - responsable
      properties:
        id_movimiento:
          type: integer
          readOnly: true
        fecha:
          type: string
          format: date-time
          readOnly: true
        tipo:
          type: string
          enum: [Entrada, Salida]
          example: "Entrada"
        id_producto:
          type: integer
          example: 1
        cantidad:
          type: integer
          minimum: 1
          example: 10
        referencia:
          type: string
          example: "Orden de compra #123"
        responsable:
          type: integer
          example: 1
        id_cliente:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          readOnly: true

    Bitacora:
      type: object
      required:
        - id_movimiento
        - id_proveedor
        - cantidad
        - id_producto
      properties:
        id_movimiento:
          type: integer
          example: 1
        id_proveedor:
          type: integer
          example: 1
        cantidad:
          type: integer
          example: 50
        id_producto:
          type: integer
          example: 1

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user]
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        two_factor_enabled:
          type: boolean

    Session:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        device_info:
          type: string
        ip_address:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        is_active:
          type: boolean

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 1
        message:
          type: string
        error:
          type: string

tags:
  - name: Auth
    description: Endpoints de autenticación y autorización
  - name: Users
    description: Gestión de usuarios
  - name: Sessions
    description: Gestión de sesiones de usuario
  - name: Clientes
    description: Operaciones relacionadas con clientes
  - name: Proveedores
    description: Operaciones relacionadas con proveedores
  - name: Productos
    description: Operaciones relacionadas con productos
  - name: Movimientos
    description: Operaciones relacionadas con movimientos de inventario
  - name: Bitácora
    description: Operaciones relacionadas con bitácora de proveedores
    